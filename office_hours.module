<?php
/**
 * @file
 * Creates a field and widget for inserting working or office hours per day
 */

/**
 * Implementation of hook_menu().
 */
function office_hours_menu() {
  $items = array();
  $items['office_hours/get_week'] = array(
    'title' => 'Change week JavaScript callback',
    'page callback' => 'office_hours_page_get_week',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function office_hours_theme() {
  return array(
    'office_hours_formatter_default' => array(
      'arguments' => array('element' => NULL),
      'template' => 'office_hours_formatter_default',
    ),
    'office_hours_formatter_daily' => array(
      'arguments' => array('element' => NULL),
      'template' => 'office_hours_formatter_daily',
    ),
    'office_hours_week' => array(
    	'arguments' => array('element' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
    'office_hours_format_day' => array(
      'arguments' => array('name' => NULL, 'open' => NULL, 'close' => NULL),
      'file' => 'office_hours.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_content_is_empty().
 *
 * @return boolean
 *    TRUE if field item is considered empty.
 */
function office_hours_content_is_empty($item, $field) {
  // First check, we don't want rules without a scope.
  if (!isset($item['scope']) || empty($item['scope'])) {
    return TRUE;
  }

  switch ($item['scope']) {
  case 'week':
    return empty($item['week_start']);
    break;
  case 'week_range':
    return empty($item['week_start']) || empty($item['week_start']);
    break;
  }

  // Check if one of the days have a open hour.
  foreach (_office_hours_day_names() as $name) {
    if (!empty($item[$name . '_open'])) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implementation of hook_field_info().
 *
 * @return
 *   An array keyed by field type name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the field type.
 */
function office_hours_field_info() {
  return array(
    'office_hours' => array(
    	'label' => 'Office Hours',
      'description' => t('Store office or opening hours in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 * Handle the parameters for a field.
 */
function office_hours_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns = array();

      $columns['scope'] = array(
        'type' => 'varchar',
        'length' => '10',
        'description' => t('Scope for this office hours record, one of "all", "odd", "even", "week" or "week_range".'),
      );

      $columns['week_start'] = array(
        'type' => 'varchar',
        'length' => '10',
        'description' => t('Week where this rule starts, specified as a ISO 8601 formatted week number ("2009W07").'),
      );

      $columns['week_end'] = array(
        'type' => 'varchar',
        'length' => '10',
        'description' => t('Week where this rule ends, same format as week_start.'),
      );

      foreach (_office_hours_day_names() as $abbr) {
        # Drupals db_type_map doesn't have time fields, so we override
        # it by selecting the field type for the individual databases.
        $columns[$abbr . '_open'] = array(
          'type' => 'varchar',
          'pgsql_type' => 'time',
          'mysql_type' => 'time',
        );
        $columns[$abbr . '_close'] = array(
          'type' => 'varchar',
          'pgsql_type' => 'time',
          'mysql_type' => 'time',
        );
      }

      return $columns;

    case 'form':
      $form = array();

      $form['allow_hours_past_midnight'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow hours past midnight'),
        '#required' => FALSE,
        '#default_value' => isset($field['allow_past_midnight']) ? $field['allow_past_midnight'] : 0,
        '#description' => t('Please note that this will work as long as the opening hours are not through midnight.'),
      );

      $form['display_none_as_closed'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display days as closed'),
        '#default_value' => isset($field['display_none_as_closed']) ? $field['display_none_as_closed'] : 0,
        '#description' => t('Display days where no opening hours are displayed as “Closed”. Otherwise, they will not be listed at all.'),
      );

      return $form;

    case 'save':
      return array('allow_hours_past_midnight', 'display_none_as_closed');
  }
}

/**
 * Implementation of hook_field().
 */
function office_hours_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'sanitize':
      // Attach office hours data to node.
      $node->{$field['field_name'] . '_processed'} = office_hours_process_data($field, $items);
    case 'presave':
      $days = _office_hours_day_names();
      // Unpack the array of open and close time, so they'll get stored
      // in the database.
      foreach ($items as $delta => $week) {
        foreach($days as $day) {
          if (isset($items[$delta][$day])) {
            $items[$delta][$day . '_open'] = sprintf('%02u:%02u', $items[$delta][$day]['open']['hours'], $items[$delta][$day]['open']['minutes']);
            $items[$delta][$day . '_close'] = sprintf('%02u:%02u', $items[$delta][$day]['close']['hours'], $items[$delta][$day]['close']['minutes']);
            unset($items[$delta][$day]);
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 *
 * Declare information about a formatter.
 */
function office_hours_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Week overview'),
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
    'daily' => array(
      'label' => t('Office hours of the day (compact)'),
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function office_hours_widget_info() {
  return array(
    'office_hours_week' => array(
      'label' => t('Week overview'),
      'field types' => array('office_hours'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 */
function office_hours_elements() {
  module_load_include('elements.inc', 'office_hours');
  return _office_hours_elements();
}


/**
 * Implementation of hook_widget().
 */
function office_hours_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#field_settings' => content_fields($field['field_name'], $form['#node']->type),
  );
  return $element;
}

/**
 * Implementation of hook_views_api().
 */
function office_hours_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'office_hours') . '/includes',
  );
}

/**
 * Page callback to change week via JavaScript.
 *
 * Returns the specified week for the specified field on the specified node.
 * Just a simple wrapper for office_hours_bulk_load().
 *
 * @param object $nids
 *    Node IDs we wan't to get hours for.
 * @param string $field_name
 *    Name of our CCK field.
 * @param string $week
 *    ISO-8601 identifier for the week (ie. 2009W23).
 */
function office_hours_page_get_week($nids, $field_name, $year = NULL, $week = NULL) {
  // We are returning JavaScript, so tell the browser.
  drupal_set_header('Content-Type', 'application/json');

  echo drupal_to_js(office_hours_bulk_load($nids, $field_name, $year, $week, TRUE));
}

/**
 * Helper function to load office hours data for several nodes.
 *
 * @param object $nids
 *    Node IDs we wan't to get hours for.
 * @param string $field_name
 *    Name of our CCK field.
 * @param string $week
 *    ISO-8601 identifier for the week (ie. 2009W23).
 * @return array
 *    Office hours data, keyed by node id.
 */
function office_hours_bulk_load($nids, $field_name, $year = NULL, $week = NULL, $render = FALSE) {
  $data = array();

  $nid_array = array_filter(explode(',', $nids), 'is_numeric');
  sort($nid_array, SORT_NUMERIC);

  // Default to current year and week if not set.
  if (is_null($year) || is_null($week)) {
    $year = intval(date('Y'));
    $week = intval(date('W'));
  }

  // Sanitise our input.
  $field_name = preg_replace('/[^A-Za-z0-9_-]/', '', $field_name);
  $year = preg_replace('/[^\d]/', '', $year);
  $week = preg_replace('/[^\d]/', '', $week);

  // If the date is outside a reasonable range, assume the current year.
  if ($year < 2000 || $year > 3000) {
    $year = (integer) format_date($_SERVER['REQUEST_TIME'], 'custom', 'Y');
  }

  // If week is less than one, switch to the last week of the previous year.
  if ($week < 1) {
    $year--;
    $week = office_hours_week_count_for_year($year);
  }
  # Check if we're going from last week of year to next year
  # We dont always have 53 weeks, so check for last wee no in selected year
  elseif ($week > office_hours_week_count_for_year($year)) {
    $week = 1;
    $year++;
  }

  $data['year'] = (integer) $year;
  $data['week'] = (integer) $week;

  if (!empty($nids) && !empty($field_name)) {
    $cache_key = implode(':', array(
      'office_hours', 'get_week', implode(',', $nid_array),
      $field_name, $year, $week,
    ));

    // If available, serve cached data.
    if ($cache = cache_get($cache_key) && $cache->expire > $_SERVER['REQUEST_TIME']) {
      $data = $cache->data;
      $expiry = $cache->expire;
    }
    else {
      $field = content_fields($field_name);
      $items = office_hours_load_data($nid_array, $field);

      foreach ($nid_array as $nid) {
        // Correctly format week spec for our helper functions.
        $week_spec = sprintf('%04uW%02u', $data['year'], $data['week']);
        $data['data'][$nid] = office_hours_process_data($field, $items[$nid], $week_spec);
      }

      // Cache expires next quarter hour.
      $minutes = ceil((date('i') + 1) / 15) * 15;

      if ($minutes == 60) {
        $expiry = strtotime(date('Y-m-d\T') . (date('H') + 1)  . ':00');
      }
      else {
        $expiry = strtotime(date('Y-m-d\TH') . ':' . $minutes);
      }

      cache_set($cache_key, $data, 'cache', $expiry);
    }

    if ($render and !isset($data['html'])) {
      foreach ($nid_array as $nid) {
        // Create mock node and element for rendering our field.
        $node = new stdClass;
        $node->nid = $nid;
        $node->{$field_name . '_processed'} = $data['data'][$nid];
        $element = array(
          '#field_name' => $field_name,
          '#node' => $node,
        );

        $data['html'][$nid] = theme('office_hours_formatter_default', $element);
      }
      // Resave the cache with the rendered elements.
      cache_set($cache_key, $data, 'cache', $expiry);
    }
  }
  return $data;
}

/**
 * Data loading function for office hours.
 *
 * While we can use CCK's API to handle this for us, the objective here
 * is to get all our data with a single query, since it is used heavily
 * in non-cacheable contexts.
 *
 * @param mixed $nids
 *    Either a single node ID or an array for multiple nodes.
 * @param array $field
 *    The office_hours field instance.
 * @return array
 *    The loaded data, keyed by node id and delta.
 */
function office_hours_load_data($nids, $field) {
  // Build SQL where statement. Take extra care with $nids, since it
  // contains raw request data.
  if (is_numeric($nids)) {
    $where = 'WHERE nid = ' . intval($nids) . ' ';
  }
  elseif (is_array($nids)) {
    $nids = array_filter($nids, 'is_numeric');
    if (!empty($nids)) {
      $where = 'WHERE nid IN (' . implode(',', $nids) . ') ';
    }
    else {
      return array();
    }
  }
  else {
    return array();
  }

  $dbinfo = content_database_info($field);

  // Start building our query.
  $col_names = array('nid');

  // For multiple values, we need the delta value.
  if ($field['multiple']) {
    $col_names[] = 'delta';
  }

  // Add each of our columns aliased so the return data will be uniform.
  foreach ($dbinfo['columns'] as $name => $attributes) {
    $col_names[] = $attributes['column'] . ' AS ' . $name;
  }
  $sql = 'SELECT ' . implode(', ', $col_names);
  $sql .= ' FROM ' . $dbinfo['table'] . ' ' . $where;

  $query = db_query($sql);

  $data = array();
  while ($row = db_fetch_array($query)) {
    $delta = (isset($row['delta'])) ? $row['delta'] : 0;
    $data[$row['nid']][$delta] = $row;
  }

  return $data;
}

/**
 * Process the office hours data for a single node.
 *
 * @param array $field
 *    The office_hours field instance.
 * @param array $items
 *    The office hour items for this node.
 * @param string $week_spec
 *    The week that we're looking for specified in ISO 8601 format.
 *    Defaults to current week.
 * @return array
 *    Processed data.
 */
function office_hours_process_data($field, $items, $week_spec = NULL) {
  $data = array();

  $data['week'] = office_hours_resolve_week($field, $items, $week_spec);
  $data['seconds_to_closing'] = office_hours_opening_status($data['week']);
  $data['status'] = ($data['seconds_to_closing']) ? 'open' : 'closed';
  $data['status_local'] = ($data['seconds_to_closing']) ? t('open') : t('closed');
  $data['week_data'] = array_shift($data['week']);

  return $data;
}

/**
 * Parse user input time.
 *
 * @param string $input
 *    User text input.
 * @return array
 *    Array with hours/minutes values if successful, empty array if not.
 */
function office_hours_parse_time_input($input) {
  $result = array();
  $matches = array();

  // Strip spaces before trying to match.
  $input = str_replace(' ', '', $input);

  if (preg_match('/(\d{1,2})[:.](\d{2})/', $input, $matches)) {
    if ($matches[1] < 24 && $matches[2] < 60) {
      $result['hours'] = intval($matches[1]);
      $result['minutes'] = intval($matches[2]);
    }
  }

  return $result;
}

/**
 * Sanitise user week input.
 *
 * @param string $input
 *    User text input.
 * @return mixed
 *    Week in "2009W42" format or NULL if not valid.
 */
function office_hours_sanitise_week_input($input) {
  $matches = array();

  // Strip spaces before trying to match.
  $input = str_replace(' ', '', $input);

  if (preg_match('/(\d{4})W?(\d{2})/', $input, $matches)) {
    # Check for week number, we dont always have 53 weeks per year
    if ($matches[1] > 2000 && $matches[2] < ( 1+date('W', mktime(0,0,0,12,31, $year)) )) {
      return sprintf('%04uW%02u', intval($matches[1]), intval($matches[2]));
    }
  }

  return NULL;
}

/**
 * Helper function for week resolution.
 *
 * Resolves multiple values into a single value with one or more periods
 * per day, matching the current week or the one specified.
 *
 * @param array $field
 *    The office_hours field instance.
 * @param array $items
 *    The office_hours field instance values.
 * @param string $week_spec
 *    The week that we're looking for specified in ISO 8601 format.
 *    Defaults to current week.
 * @return array
 *    An array with the first item being data about the week, and the
 *    rest being the individual week days.
 */
function office_hours_resolve_week($field, $items, $week_spec = NULL) {
  $week_num_year = (!is_null($week_spec)) ? $week_spec : _office_hours_week_to_iso();
  list($week_year, $week_num) = _office_hours_week_from_iso($week_num_year);
  $week_kind = ($week_num % 2) ? 'odd' : 'even';
  $values = array();
  $week = array('#data' => array(
    'number' => (integer) $week_num,
    'year' => (integer) $week_year,
    'year_and_number' => $week_num_year,
    'kind' => $week_kind,
  ));

  // If we have no field data, just return the week data.
  if (empty($items)) {
    return $week;
  }

  $pick = array();

  foreach (array_reverse($items, TRUE) as $delta => $item) {
    // If a rule has been selected of a different scope, stop looking.
    // This means that more than one rule of the same scope can apply at
    // any given time.
    if (isset($week['#rule']['scope']) && $week['#rule']['scope'] != $item['scope']) {
      break;
    }

    // Check if the rule matches.
    if (($item['scope'] == 'week_range' && $item['week_start'] <= $week_num_year && $item['week_end'] >= $week_num_year) ||
      ($item['scope'] == 'week' && $item['week_start'] == $week_num_year) ||
      ($item['scope'] == $week_kind) || # For even/odd.
      ($item['scope'] == 'all')) {
      $week['#rule']['scope'] = $item['scope'];
      $week['#rule']['week_start'] = $item['week_start'];
      $week['#rule']['week_end'] = $item['week_end'];
      $pick[$delta] = $item;
    }
  }

  // Then sort the multiple values into days.
  foreach (_office_hours_day_names() as $day) {
    foreach ($pick as $delta => $row) {
      if (!empty($row[$day . '_open'])) {
        $week[$day][$delta]['open'] = $row[$day . '_open'];
        $week[$day][$delta]['close'] = $row[$day . '_close'];
      }
    }

    // If there were any rules available for the day, sort them by start
    // time, so they’ll appear in the logical order.
    if (isset($week[$day])) {
      usort($week[$day], '_office_hours_day_rule_sort');
    }
    elseif ($field['display_none_as_closed']) {
      $week[$day] = array();
    }
  }

  return $week;
}

/**
 * Sorting callback for office hours rules for a day.
 */
function _office_hours_day_rule_sort($a, $b) {
  if ($a['open'] == $b['open']) {
    return 0;
  }
  return ($a['open'] < $b['open']) ? -1 : 1;
}

/**
 * Calcuate whether we're open.
 *
 * @param array $week
 *    The week array with data as calculated by office_hours_resolve_week.
 * @return integer
 *    Number of seconds until closing time or 0 if closed.
 */
function office_hours_opening_status($week) {
  // Finally, figure out whether we're open and if so, how long there
  // is till closing time.
  $day_name = strtolower(date('D', $_SERVER['REQUEST_TIME']));
  $today = date('Y-m-d', $_SERVER['REQUEST_TIME']);
  $status = FALSE;

  if (is_array($week[$day_name]) && (!empty($week[$day_name]))) {
    foreach($week[$day_name] as $delta => $day) {
      $now = $_SERVER['REQUEST_TIME'];
      $open = strtotime($day_name . $day['open']);
      $close = strtotime($day_name . $day['close']);
      if ($now > $open && $now < $close) {
        $status = $close - $now;
      }
    }
  }
  return $status;
}

/**
 * Format a time string like 19:00:00.
 */
function office_hours_format_time($time) {
  list($hours, $minutes, $seconds) = explode(':', $time);

  if (is_numeric($hours) && $hours >= 0 && $hours < 24) {
    return sprintf('%02u:%02u', $hours, $minutes);
  }
}

/**
 * Return short day names, in the same order used by date API so we can
 * use its sorting function.
 */
function _office_hours_day_names() {
  return array('sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat');
}

/**
 * Return the ISO-8601 weekday numbers.
 *
 * @return array
 *    Day number, keyed by their abbreviated day name.
 */
function _office_hours_iso_day_num() {
  return array(
    'mon' => 1, 'tue' => 2, 'wed' => 3, 'thu' => 4,
    'fri' => 5, 'sat' => 6, 'sun' => 7,
  );
}

/**
 * Find the start and end days that of a week.
 *
 * @param string $week
 *    Week/year in ISO-8601 format (ie. 2009W34).
 * @return array
 *    Timestamps for the start and end dates of the week.
 */
function _office_hours_week_days($week) {
  // TODO: This approach only works when we're following ISO-8601,
  // ie. the first day of the week is monday.
  $start = strtotime($week);
  $end = strtotime($week . 7);
  return array('start' => $start, 'end' => $end);
}

/**
 * Create ISO 8601 week specifier.
 *
 * @param integer $year
 * @param integer $week
 * @return string
 */
function _office_hours_week_to_iso($year=NULL, $week=NULL) {
  if (empty($year)) {
    $year = intval(date('Y'));
    $week = intval(date('W'));
  }
  return sprintf('%04uW%02u', $year, $week);
}

/**
 * Parse ISO 8601 week specifier.
 *
 * @param string $spec
 * @return array
 */
function _office_hours_week_from_iso($spec=NULL) {
  if (empty($spec)) {
    $spec = date('Y\WW');
  }
  return explode('W', $spec);
}

/**
 * Get the number of weeks in a year.
 *
 * @param integer $year
 *   Year to get count for.
 * @return integer
 *   Number of weeks in the given year.
 */
function office_hours_week_count_for_year($year) {
  $week_count = (integer) date('W', mktime(0, 0, 0, 12, 31, $year));

  // In some cases, the last day of the year is actually in week one of
  // the following year. In this case, the week count is 52.
  if ($week_count === 1) {
    $week_count = 52;
  }

  return $week_count;
}

/**
 * Preprocess hook for default field formatter.
 */
function office_hours_preprocess_office_hours_formatter_default(&$vars) {
  $element = $vars['element'];
  $vars['node'] = $node = $element['#node'];

  $name = $element['#field_name'] . '_processed';
  $field_data = $node->$name;
  $vars['week'] = $field_data['week'];
  $vars['week_data'] = $field_data['week_data'];

  // Calculate week view, and prepare the variables we need to render it.
  $days = _office_hours_week_days($vars['week_data']['year_and_number']);
  $vars['start_day'] = format_date($days['start'], 'custom', 'd/m');
  $vars['end_day'] = format_date($days['end'], 'custom', 'd/m');
  $vars['day_abbr'] = date_week_days_ordered(_office_hours_day_names());
  $vars['day_names'] = date_week_days_ordered(date_week_days(TRUE));
  $vars['week_num_text'] = t('Week @week_num', array('@week_num' => $vars['week_data']['number']));

  drupal_add_js(array('officeHours' => array('node' . $vars['node']->nid => array(
    'year' => $vars['week_data']['year'],
    'week' => $vars['week_data']['number'],
    'nid' => $vars['node']->nid,
    'callback' => url('office_hours/get_week'),
    'field_name' => $element['#field_name'],
  ))), 'setting');
  drupal_add_js(drupal_get_path('module', 'office_hours') . '/js/office_hours.js');
  drupal_add_js(drupal_get_path('module', 'office_hours') . '/js/office_hours.display.js');

  return $vars;
}

/**
 * Preprocess hook for default field formatter.
 */
function office_hours_preprocess_office_hours_formatter_daily(&$vars) {
  // This is ridiculously long, but it seems to be the best way to
  // get the day name for the currently selected Drupal timezone,
  // without the localisation.
  $vars['day_name'] = strtolower(format_date($_SERVER['REQUEST_TIME'], 'custom', 'D', NULL, 'en'));

  $field_name = $vars['element']['#field_name'] . '_processed';
  $formatted_field = $vars['element']['#node']->$field_name;
  $vars['day'] = $formatted_field['week'][$vars['day_name']];
}

